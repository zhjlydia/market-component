import { SpuiComponent } from '../common/component';
SpuiComponent({
  field: true,
  relation: {
    name: 'checkbox-group',
    type: 'ancestor'
  },
  classes: ['icon-class', 'label-class'],
  props: {
    value: null,
    disabled: Boolean,
    useIconSlot: Boolean,
    checkedColor: String,
    labelPosition: String,
    labelDisabled: Boolean,
    shape: {
      type: String,
      value: 'round'
    }
  },
  methods: {
    emitChange(value) {
      const parent = this.getRelationNodes('../checkbox-group/index')[0];

      if (parent) {
        this.setParentValue(parent, value);
      } else {
        this.$emit('input', value);
        this.$emit('change', value);
      }
    },

    toggle() {
      if (!this.data.disabled) {
        this.emitChange(!this.data.value);
      }
    },

    onClickLabel() {
      if (!this.data.disabled && !this.data.labelDisabled) {
        this.emitChange(!this.data.value);
      }
    },

    setParentValue(parent, value) {
      const parentValue = parent.data.value.slice();
      const {
        name
      } = this.data;

      if (value) {
        if (parent.data.max && parentValue.length >= parent.data.max) {
          return;
        }
        /* istanbul ignore else */


        if (parentValue.indexOf(name) === -1) {
          parentValue.push(name);
          parent.$emit('input', parentValue);
          parent.$emit('change', parentValue);
        }
      } else {
        const index = parentValue.indexOf(name);
        /* istanbul ignore else */

        if (index !== -1) {
          parentValue.splice(index, 1);
          parent.$emit('input', parentValue);
          parent.$emit('change', parentValue);
        }
      }
    }

  }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNoZWNrYm94L2luZGV4LnRzIl0sIm5hbWVzIjpbIlNwdWlDb21wb25lbnQiLCJmaWVsZCIsInJlbGF0aW9uIiwibmFtZSIsInR5cGUiLCJjbGFzc2VzIiwicHJvcHMiLCJ2YWx1ZSIsImRpc2FibGVkIiwiQm9vbGVhbiIsInVzZUljb25TbG90IiwiY2hlY2tlZENvbG9yIiwiU3RyaW5nIiwibGFiZWxQb3NpdGlvbiIsImxhYmVsRGlzYWJsZWQiLCJzaGFwZSIsIm1ldGhvZHMiLCJlbWl0Q2hhbmdlIiwicGFyZW50IiwiZ2V0UmVsYXRpb25Ob2RlcyIsInNldFBhcmVudFZhbHVlIiwiJGVtaXQiLCJ0b2dnbGUiLCJkYXRhIiwib25DbGlja0xhYmVsIiwicGFyZW50VmFsdWUiLCJzbGljZSIsIm1heCIsImxlbmd0aCIsImluZGV4T2YiLCJwdXNoIiwiaW5kZXgiLCJzcGxpY2UiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLGFBQVQsUUFBOEIscUJBQTlCO0FBRUFBLGFBQWEsQ0FBQztBQUNaQyxFQUFBQSxLQUFLLEVBQUUsSUFESztBQUdaQyxFQUFBQSxRQUFRLEVBQUU7QUFDUkMsSUFBQUEsSUFBSSxFQUFFLGdCQURFO0FBRVJDLElBQUFBLElBQUksRUFBRTtBQUZFLEdBSEU7QUFRWkMsRUFBQUEsT0FBTyxFQUFFLENBQUMsWUFBRCxFQUFlLGFBQWYsQ0FSRztBQVVaQyxFQUFBQSxLQUFLLEVBQUU7QUFDTEMsSUFBQUEsS0FBSyxFQUFFLElBREY7QUFFTEMsSUFBQUEsUUFBUSxFQUFFQyxPQUZMO0FBR0xDLElBQUFBLFdBQVcsRUFBRUQsT0FIUjtBQUlMRSxJQUFBQSxZQUFZLEVBQUVDLE1BSlQ7QUFLTEMsSUFBQUEsYUFBYSxFQUFFRCxNQUxWO0FBTUxFLElBQUFBLGFBQWEsRUFBRUwsT0FOVjtBQU9MTSxJQUFBQSxLQUFLLEVBQUU7QUFDTFgsTUFBQUEsSUFBSSxFQUFFUSxNQUREO0FBRUxMLE1BQUFBLEtBQUssRUFBRTtBQUZGO0FBUEYsR0FWSztBQXVCWlMsRUFBQUEsT0FBTyxFQUFFO0FBQ1BDLElBQUFBLFVBQVUsQ0FBQ1YsS0FBRCxFQUFNO0FBQ2QsWUFBTVcsTUFBTSxHQUFHLEtBQUtDLGdCQUFMLENBQXNCLHlCQUF0QixFQUFpRCxDQUFqRCxDQUFmOztBQUNBLFVBQUlELE1BQUosRUFBWTtBQUNWLGFBQUtFLGNBQUwsQ0FBb0JGLE1BQXBCLEVBQTRCWCxLQUE1QjtBQUNELE9BRkQsTUFFTztBQUNMLGFBQUtjLEtBQUwsQ0FBVyxPQUFYLEVBQW9CZCxLQUFwQjtBQUNBLGFBQUtjLEtBQUwsQ0FBVyxRQUFYLEVBQXFCZCxLQUFyQjtBQUNEO0FBQ0YsS0FUTTs7QUFXUGUsSUFBQUEsTUFBTSxHQUFBO0FBQ0osVUFBSSxDQUFDLEtBQUtDLElBQUwsQ0FBVWYsUUFBZixFQUF5QjtBQUN2QixhQUFLUyxVQUFMLENBQWdCLENBQUMsS0FBS00sSUFBTCxDQUFVaEIsS0FBM0I7QUFDRDtBQUNGLEtBZk07O0FBaUJQaUIsSUFBQUEsWUFBWSxHQUFBO0FBQ1YsVUFBSSxDQUFDLEtBQUtELElBQUwsQ0FBVWYsUUFBWCxJQUF1QixDQUFDLEtBQUtlLElBQUwsQ0FBVVQsYUFBdEMsRUFBcUQ7QUFDbkQsYUFBS0csVUFBTCxDQUFnQixDQUFDLEtBQUtNLElBQUwsQ0FBVWhCLEtBQTNCO0FBQ0Q7QUFDRixLQXJCTTs7QUF1QlBhLElBQUFBLGNBQWMsQ0FBQ0YsTUFBRCxFQUFTWCxLQUFULEVBQWM7QUFDMUIsWUFBTWtCLFdBQVcsR0FBR1AsTUFBTSxDQUFDSyxJQUFQLENBQVloQixLQUFaLENBQWtCbUIsS0FBbEIsRUFBcEI7QUFDQSxZQUFNO0FBQUV2QixRQUFBQTtBQUFGLFVBQVcsS0FBS29CLElBQXRCOztBQUVBLFVBQUloQixLQUFKLEVBQVc7QUFDVCxZQUFJVyxNQUFNLENBQUNLLElBQVAsQ0FBWUksR0FBWixJQUFtQkYsV0FBVyxDQUFDRyxNQUFaLElBQXNCVixNQUFNLENBQUNLLElBQVAsQ0FBWUksR0FBekQsRUFBOEQ7QUFDNUQ7QUFDRDtBQUNEOzs7QUFDQSxZQUFJRixXQUFXLENBQUNJLE9BQVosQ0FBb0IxQixJQUFwQixNQUE4QixDQUFDLENBQW5DLEVBQXNDO0FBQ3BDc0IsVUFBQUEsV0FBVyxDQUFDSyxJQUFaLENBQWlCM0IsSUFBakI7QUFDQWUsVUFBQUEsTUFBTSxDQUFDRyxLQUFQLENBQWEsT0FBYixFQUFzQkksV0FBdEI7QUFDQVAsVUFBQUEsTUFBTSxDQUFDRyxLQUFQLENBQWEsUUFBYixFQUF1QkksV0FBdkI7QUFDRDtBQUNGLE9BVkQsTUFVTztBQUNMLGNBQU1NLEtBQUssR0FBR04sV0FBVyxDQUFDSSxPQUFaLENBQW9CMUIsSUFBcEIsQ0FBZDtBQUNBOztBQUNBLFlBQUk0QixLQUFLLEtBQUssQ0FBQyxDQUFmLEVBQWtCO0FBQ2hCTixVQUFBQSxXQUFXLENBQUNPLE1BQVosQ0FBbUJELEtBQW5CLEVBQTBCLENBQTFCO0FBQ0FiLFVBQUFBLE1BQU0sQ0FBQ0csS0FBUCxDQUFhLE9BQWIsRUFBc0JJLFdBQXRCO0FBQ0FQLFVBQUFBLE1BQU0sQ0FBQ0csS0FBUCxDQUFhLFFBQWIsRUFBdUJJLFdBQXZCO0FBQ0Q7QUFDRjtBQUNGOztBQTlDTTtBQXZCRyxDQUFELENBQWIiLCJmaWxlIjoiY2hlY2tib3gvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTcHVpQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tbW9uL2NvbXBvbmVudCc7XHJcblxyXG5TcHVpQ29tcG9uZW50KHtcclxuICBmaWVsZDogdHJ1ZSxcclxuXHJcbiAgcmVsYXRpb246IHtcclxuICAgIG5hbWU6ICdjaGVja2JveC1ncm91cCcsXHJcbiAgICB0eXBlOiAnYW5jZXN0b3InXHJcbiAgfSxcclxuXHJcbiAgY2xhc3NlczogWydpY29uLWNsYXNzJywgJ2xhYmVsLWNsYXNzJ10sXHJcblxyXG4gIHByb3BzOiB7XHJcbiAgICB2YWx1ZTogbnVsbCxcclxuICAgIGRpc2FibGVkOiBCb29sZWFuLFxyXG4gICAgdXNlSWNvblNsb3Q6IEJvb2xlYW4sXHJcbiAgICBjaGVja2VkQ29sb3I6IFN0cmluZyxcclxuICAgIGxhYmVsUG9zaXRpb246IFN0cmluZyxcclxuICAgIGxhYmVsRGlzYWJsZWQ6IEJvb2xlYW4sXHJcbiAgICBzaGFwZToge1xyXG4gICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgIHZhbHVlOiAncm91bmQnXHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgbWV0aG9kczoge1xyXG4gICAgZW1pdENoYW5nZSh2YWx1ZSkge1xyXG4gICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLmdldFJlbGF0aW9uTm9kZXMoJy4uL2NoZWNrYm94LWdyb3VwL2luZGV4JylbMF07XHJcbiAgICAgIGlmIChwYXJlbnQpIHtcclxuICAgICAgICB0aGlzLnNldFBhcmVudFZhbHVlKHBhcmVudCwgdmFsdWUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuJGVtaXQoJ2lucHV0JywgdmFsdWUpO1xyXG4gICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIHZhbHVlKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICB0b2dnbGUoKSB7XHJcbiAgICAgIGlmICghdGhpcy5kYXRhLmRpc2FibGVkKSB7XHJcbiAgICAgICAgdGhpcy5lbWl0Q2hhbmdlKCF0aGlzLmRhdGEudmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIG9uQ2xpY2tMYWJlbCgpIHtcclxuICAgICAgaWYgKCF0aGlzLmRhdGEuZGlzYWJsZWQgJiYgIXRoaXMuZGF0YS5sYWJlbERpc2FibGVkKSB7XHJcbiAgICAgICAgdGhpcy5lbWl0Q2hhbmdlKCF0aGlzLmRhdGEudmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHNldFBhcmVudFZhbHVlKHBhcmVudCwgdmFsdWUpIHtcclxuICAgICAgY29uc3QgcGFyZW50VmFsdWUgPSBwYXJlbnQuZGF0YS52YWx1ZS5zbGljZSgpO1xyXG4gICAgICBjb25zdCB7IG5hbWUgfSA9IHRoaXMuZGF0YTtcclxuXHJcbiAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgIGlmIChwYXJlbnQuZGF0YS5tYXggJiYgcGFyZW50VmFsdWUubGVuZ3RoID49IHBhcmVudC5kYXRhLm1heCkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xyXG4gICAgICAgIGlmIChwYXJlbnRWYWx1ZS5pbmRleE9mKG5hbWUpID09PSAtMSkge1xyXG4gICAgICAgICAgcGFyZW50VmFsdWUucHVzaChuYW1lKTtcclxuICAgICAgICAgIHBhcmVudC4kZW1pdCgnaW5wdXQnLCBwYXJlbnRWYWx1ZSk7XHJcbiAgICAgICAgICBwYXJlbnQuJGVtaXQoJ2NoYW5nZScsIHBhcmVudFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSBwYXJlbnRWYWx1ZS5pbmRleE9mKG5hbWUpO1xyXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXHJcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgcGFyZW50VmFsdWUuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgIHBhcmVudC4kZW1pdCgnaW5wdXQnLCBwYXJlbnRWYWx1ZSk7XHJcbiAgICAgICAgICBwYXJlbnQuJGVtaXQoJ2NoYW5nZScsIHBhcmVudFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn0pO1xyXG4iXX0=
