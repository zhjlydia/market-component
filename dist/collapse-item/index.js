import { SpuiComponent } from '../common/component';
SpuiComponent({
  classes: ['content-class'],
  relation: {
    name: 'collapse',
    type: 'ancestor',

    linked(parent) {
      this.parent = parent;
    }

  },
  props: {
    name: null,
    title: null,
    value: null,
    icon: String,
    label: String,
    disabled: Boolean,
    border: {
      type: Boolean,
      value: true
    },
    isLink: {
      type: Boolean,
      value: true
    }
  },
  data: {
    contentHeight: 0,
    expanded: false
  },

  beforeCreate() {
    this.animation = wx.createAnimation({
      duration: 300,
      timingFunction: 'ease-in-out'
    });
  },

  methods: {
    updateExpanded() {
      if (!this.parent) {
        return null;
      }

      const {
        value,
        accordion,
        items
      } = this.parent.data;
      const {
        name
      } = this.data;
      const index = items.indexOf(this);
      const currentName = name == null ? index : name;
      const expanded = accordion ? value === currentName : value.some(name => name === currentName);

      if (expanded !== this.data.expanded) {
        this.updateStyle(expanded);
      }

      this.set({
        expanded
      });
    },

    updateStyle(expanded) {
      this.getRect('.spui-collapse-item__content').then(res => {
        const animationData = this.animation.height(expanded ? res.height : 0).step().export();

        if (expanded) {
          this.set({
            animationData
          });
        } else {
          this.set({
            contentHeight: res.height + 'px'
          }, () => {
            setTimeout(() => {
              this.set({
                animationData
              });
            }, 20);
          });
        }
      });
    },

    onClick() {
      if (this.data.disabled) {
        return;
      }

      const {
        name,
        expanded
      } = this.data;
      const index = this.parent.data.items.indexOf(this);
      const currentName = name == null ? index : name;
      this.parent.switch(currentName, !expanded);
    },

    onTransitionEnd() {
      if (this.data.expanded) {
        this.set({
          contentHeight: 'auto'
        });
      }
    }

  }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbGxhcHNlLWl0ZW0vaW5kZXgudHMiXSwibmFtZXMiOlsiU3B1aUNvbXBvbmVudCIsImNsYXNzZXMiLCJyZWxhdGlvbiIsIm5hbWUiLCJ0eXBlIiwibGlua2VkIiwicGFyZW50IiwicHJvcHMiLCJ0aXRsZSIsInZhbHVlIiwiaWNvbiIsIlN0cmluZyIsImxhYmVsIiwiZGlzYWJsZWQiLCJCb29sZWFuIiwiYm9yZGVyIiwiaXNMaW5rIiwiZGF0YSIsImNvbnRlbnRIZWlnaHQiLCJleHBhbmRlZCIsImJlZm9yZUNyZWF0ZSIsImFuaW1hdGlvbiIsInd4IiwiY3JlYXRlQW5pbWF0aW9uIiwiZHVyYXRpb24iLCJ0aW1pbmdGdW5jdGlvbiIsIm1ldGhvZHMiLCJ1cGRhdGVFeHBhbmRlZCIsImFjY29yZGlvbiIsIml0ZW1zIiwiaW5kZXgiLCJpbmRleE9mIiwiY3VycmVudE5hbWUiLCJzb21lIiwidXBkYXRlU3R5bGUiLCJzZXQiLCJnZXRSZWN0IiwidGhlbiIsInJlcyIsImFuaW1hdGlvbkRhdGEiLCJoZWlnaHQiLCJzdGVwIiwiZXhwb3J0Iiwic2V0VGltZW91dCIsIm9uQ2xpY2siLCJzd2l0Y2giLCJvblRyYW5zaXRpb25FbmQiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLGFBQVQsUUFBOEIscUJBQTlCO0FBRUFBLGFBQWEsQ0FBQztBQUNaQyxFQUFBQSxPQUFPLEVBQUUsQ0FBQyxlQUFELENBREc7QUFHWkMsRUFBQUEsUUFBUSxFQUFFO0FBQ1JDLElBQUFBLElBQUksRUFBRSxVQURFO0FBRVJDLElBQUFBLElBQUksRUFBRSxVQUZFOztBQUdSQyxJQUFBQSxNQUFNLENBQUNDLE1BQUQsRUFBd0I7QUFDNUIsV0FBS0EsTUFBTCxHQUFjQSxNQUFkO0FBQ0Q7O0FBTE8sR0FIRTtBQVdaQyxFQUFBQSxLQUFLLEVBQUU7QUFDTEosSUFBQUEsSUFBSSxFQUFFLElBREQ7QUFFTEssSUFBQUEsS0FBSyxFQUFFLElBRkY7QUFHTEMsSUFBQUEsS0FBSyxFQUFFLElBSEY7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LENBQVlXLElBQVosQ0FBaUJZLEtBQWpCLENBQXVCRSxPQUF2QixDQUErQixJQUEvQixDQUFkO0FBQ0EsWUFBTUMsV0FBVyxHQUFHN0IsSUFBSSxJQUFJLElBQVIsR0FBZTJCLEtBQWYsR0FBdUIzQixJQUEzQztBQUVBLFdBQUtHLE1BQUwsQ0FBWXVDLE1BQVosQ0FBbUJiLFdBQW5CLEVBQWdDLENBQUNiLFFBQWpDO0FBQ0QsS0F6RE07O0FBMkRQMkIsSUFBQUEsZUFBZSxHQUFBO0FBQ2IsVUFBSSxLQUFLN0IsSUFBTCxDQUFVRSxRQUFkLEVBQXdCO0FBQ3RCLGFBQUtnQixHQUFMLENBQVM7QUFDUGpCLFVBQUFBLGFBQWEsRUFBRTtBQURSLFNBQVQ7QUFHRDtBQUNGOztBQWpFTTtBQXhDRyxDQUFELENBQWIiLCJmaWxlIjoiY29sbGFwc2UtaXRlbS9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNwdWlDb21wb25lbnQgfSBmcm9tICcuLi9jb21tb24vY29tcG9uZW50JztcclxuXHJcblNwdWlDb21wb25lbnQoe1xyXG4gIGNsYXNzZXM6IFsnY29udGVudC1jbGFzcyddLFxyXG5cclxuICByZWxhdGlvbjoge1xyXG4gICAgbmFtZTogJ2NvbGxhcHNlJyxcclxuICAgIHR5cGU6ICdhbmNlc3RvcicsXHJcbiAgICBsaW5rZWQocGFyZW50OiBXZWFwcC5Db21wb25lbnQpIHtcclxuICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgcHJvcHM6IHtcclxuICAgIG5hbWU6IG51bGwsXHJcbiAgICB0aXRsZTogbnVsbCxcclxuICAgIHZhbHVlOiBudWxsLFxyXG4gICAgaWNvbjogU3RyaW5nLFxyXG4gICAgbGFiZWw6IFN0cmluZyxcclxuICAgIGRpc2FibGVkOiBCb29sZWFuLFxyXG4gICAgYm9yZGVyOiB7XHJcbiAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICAgIHZhbHVlOiB0cnVlXHJcbiAgICB9LFxyXG4gICAgaXNMaW5rOiB7XHJcbiAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICAgIHZhbHVlOiB0cnVlXHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgZGF0YToge1xyXG4gICAgY29udGVudEhlaWdodDogMCxcclxuICAgIGV4cGFuZGVkOiBmYWxzZVxyXG4gIH0sXHJcblxyXG4gIGJlZm9yZUNyZWF0ZSgpIHtcclxuICAgIHRoaXMuYW5pbWF0aW9uID0gd3guY3JlYXRlQW5pbWF0aW9uKHtcclxuICAgICAgZHVyYXRpb246IDMwMCxcclxuICAgICAgdGltaW5nRnVuY3Rpb246ICdlYXNlLWluLW91dCdcclxuICAgIH0pO1xyXG4gIH0sXHJcblxyXG4gIG1ldGhvZHM6IHtcclxuICAgIHVwZGF0ZUV4cGFuZGVkKCkge1xyXG4gICAgICBpZiAoIXRoaXMucGFyZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHsgdmFsdWUsIGFjY29yZGlvbiwgaXRlbXMgfSA9IHRoaXMucGFyZW50LmRhdGE7XHJcbiAgICAgIGNvbnN0IHsgbmFtZSB9ID0gdGhpcy5kYXRhO1xyXG5cclxuICAgICAgY29uc3QgaW5kZXggPSBpdGVtcy5pbmRleE9mKHRoaXMpO1xyXG4gICAgICBjb25zdCBjdXJyZW50TmFtZSA9IG5hbWUgPT0gbnVsbCA/IGluZGV4IDogbmFtZTtcclxuXHJcbiAgICAgIGNvbnN0IGV4cGFuZGVkID0gYWNjb3JkaW9uXHJcbiAgICAgICAgPyB2YWx1ZSA9PT0gY3VycmVudE5hbWVcclxuICAgICAgICA6IHZhbHVlLnNvbWUobmFtZSA9PiBuYW1lID09PSBjdXJyZW50TmFtZSk7XHJcblxyXG4gICAgICBpZiAoZXhwYW5kZWQgIT09IHRoaXMuZGF0YS5leHBhbmRlZCkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlU3R5bGUoZXhwYW5kZWQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnNldCh7IGV4cGFuZGVkIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICB1cGRhdGVTdHlsZShleHBhbmRlZDogYm9vbGVhbikge1xyXG4gICAgICB0aGlzLmdldFJlY3QoJy5zcHVpLWNvbGxhcHNlLWl0ZW1fX2NvbnRlbnQnKS50aGVuKHJlcyA9PiB7XHJcbiAgICAgICAgY29uc3QgYW5pbWF0aW9uRGF0YSA9IHRoaXMuYW5pbWF0aW9uXHJcbiAgICAgICAgICAuaGVpZ2h0KGV4cGFuZGVkID8gcmVzLmhlaWdodCA6IDApXHJcbiAgICAgICAgICAuc3RlcCgpXHJcbiAgICAgICAgICAuZXhwb3J0KCk7XHJcbiAgICAgICAgaWYgKGV4cGFuZGVkKSB7XHJcbiAgICAgICAgICB0aGlzLnNldCh7IGFuaW1hdGlvbkRhdGEgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuc2V0KFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgY29udGVudEhlaWdodDogcmVzLmhlaWdodCArICdweCdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoeyBhbmltYXRpb25EYXRhIH0pO1xyXG4gICAgICAgICAgICAgIH0sIDIwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBvbkNsaWNrKCkge1xyXG4gICAgICBpZiAodGhpcy5kYXRhLmRpc2FibGVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCB7IG5hbWUsIGV4cGFuZGVkIH0gPSB0aGlzLmRhdGE7XHJcblxyXG4gICAgICBjb25zdCBpbmRleCA9IHRoaXMucGFyZW50LmRhdGEuaXRlbXMuaW5kZXhPZih0aGlzKTtcclxuICAgICAgY29uc3QgY3VycmVudE5hbWUgPSBuYW1lID09IG51bGwgPyBpbmRleCA6IG5hbWU7XHJcblxyXG4gICAgICB0aGlzLnBhcmVudC5zd2l0Y2goY3VycmVudE5hbWUsICFleHBhbmRlZCk7XHJcbiAgICB9LFxyXG5cclxuICAgIG9uVHJhbnNpdGlvbkVuZCgpIHtcclxuICAgICAgaWYgKHRoaXMuZGF0YS5leHBhbmRlZCkge1xyXG4gICAgICAgIHRoaXMuc2V0KHtcclxuICAgICAgICAgIGNvbnRlbnRIZWlnaHQ6ICdhdXRvJ1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59KTtcclxuIl19
