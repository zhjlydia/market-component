import { SpuiComponent } from '../common/component'; // Note that the bitwise operators and shift operators operate on 32-bit ints
// so in that case, the max safe integer is 2^31-1, or 2147483647

const MAX = 2147483647;
SpuiComponent({
  field: true,
  classes: ['input-class', 'plus-class', 'minus-class'],
  props: {
    value: Number,
    integer: Boolean,
    disabled: Boolean,
    asyncChange: Boolean,
    disableInput: Boolean,
    min: {
      type: null,
      value: 1
    },
    max: {
      type: null,
      value: MAX
    },
    step: {
      type: null,
      value: 1
    }
  },
  computed: {
    minusDisabled() {
      return this.data.disabled || this.data.value <= this.data.min;
    },

    plusDisabled() {
      return this.data.disabled || this.data.value >= this.data.max;
    }

  },
  watch: {
    value(value) {
      this.set({
        value: this.range(value)
      });
    }

  },
  data: {
    focus: false
  },

  created() {
    this.set({
      value: this.range(this.data.value)
    });
  },

  methods: {
    onFocus() {
      this.setData({
        focus: true
      });
    },

    // limit value range
    range(value) {
      return Math.max(Math.min(this.data.max, value), this.data.min);
    },

    onInput(event) {
      const {
        value = ''
      } = event.detail || {};
      this.triggerInput(value);
    },

    onChange(type) {
      if (this.data[`${type}Disabled`]) {
        this.$emit('overlimit', type);
        return;
      }

      const diff = type === 'minus' ? -this.data.step : +this.data.step;
      const value = Math.round((this.data.value + diff) * 100) / 100;
      this.triggerInput(this.range(value));
      this.$emit(type);
    },

    onBlur(event) {
      const value = this.range(this.data.value);
      this.triggerInput(value);
      this.$emit('blur', event);
    },

    onMinus() {
      this.onChange('minus');
    },

    onPlus() {
      this.onChange('plus');
    },

    triggerInput(value) {
      this.set({
        value: this.data.asyncChange ? this.data.value : value
      });
      this.$emit('change', value);
    }

  }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0ZXBwZXIvaW5kZXgudHMiXSwibmFtZXMiOlsiU3B1aUNvbXBvbmVudCIsIk1BWCIsImZpZWxkIiwiY2xhc3NlcyIsInByb3BzIiwidmFsdWUiLCJOdW1iZXIiLCJpbnRlZ2VyIiwiQm9vbGVhbiIsImRpc2FibGVkIiwiYXN5bmNDaGFuZ2UiLCJkaXNhYmxlSW5wdXQiLCJtaW4iLCJ0eXBlIiwibWF4Iiwic3RlcCIsImNvbXB1dGVkIiwibWludXNEaXNhYmxlZCIsImRhdGEiLCJwbHVzRGlzYWJsZWQiLCJ3YXRjaCIsInNldCIsInJhbmdlIiwiZm9jdXMiLCJjcmVhdGVkIiwibWV0aG9kcyIsIm9uRm9jdXMiLCJzZXREYXRhIiwiTWF0aCIsIm9uSW5wdXQiLCJldmVudCIsImRldGFpbCIsInRyaWdnZXJJbnB1dCIsIm9uQ2hhbmdlIiwiJGVtaXQiLCJkaWZmIiwicm91bmQiLCJvbkJsdXIiLCJvbk1pbnVzIiwib25QbHVzIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxhQUFULFFBQThCLHFCQUE5QixDLENBRUE7QUFDQTs7QUFDQSxNQUFNQyxHQUFHLEdBQUcsVUFBWjtBQUVBRCxhQUFhLENBQUM7QUFDWkUsRUFBQUEsS0FBSyxFQUFFLElBREs7QUFHWkMsRUFBQUEsT0FBTyxFQUFFLENBQ1AsYUFETyxFQUVQLFlBRk8sRUFHUCxhQUhPLENBSEc7QUFTWkMsRUFBQUEsS0FBSyxFQUFFO0FBQ0xDLElBQUFBLEtBQUssRUFBRUMsTUFERjtBQUVMQyxJQUFBQSxPQUFPLEVBQUVDLE9BRko7QUFHTEMsSUFBQUEsUUFBUSxFQUFFRCxPQUhMO0FBSUxFLElBQUFBLFdBQVcsRUFBRUYsT0FKUjtBQUtMRyxJQUFBQSxZQUFZLEVBQUVILE9BTFQ7QUFNTEksSUFBQUEsR0FBRyxFQUFFO0FBQ0hDLE1BQUFBLElBQUksRUFBRSxJQURIO0FBRUhSLE1BQUFBLEtBQUssRUFBRTtBQUZKLEtBTkE7QUFVTFMsSUFBQUEsR0FBRyxFQUFFO0FBQ0hELE1BQUFBLElBQUksRUFB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S0FBbkI7QUFDRCxLQWpDTTs7QUFtQ1BRLElBQUFBLE9BQU8sR0FBQTtBQUNMLFdBQUtMLFFBQUwsQ0FBYyxPQUFkO0FBQ0QsS0FyQ007O0FBdUNQTSxJQUFBQSxNQUFNLEdBQUE7QUFDSixXQUFLTixRQUFMLENBQWMsTUFBZDtBQUNELEtBekNNOztBQTJDUEQsSUFBQUEsWUFBWSxDQUFDM0IsS0FBRCxFQUFjO0FBQ3hCLFdBQUtnQixHQUFMLENBQVM7QUFDUGhCLFFBQUFBLEtBQUssRUFBRSxLQUFLYSxJQUFMLENBQVVSLFdBQVYsR0FBd0IsS0FBS1EsSUFBTCxDQUFVYixLQUFsQyxHQUEwQ0E7QUFEMUMsT0FBVDtBQUdBLFdBQUs2QixLQUFMLENBQVcsUUFBWCxFQUFxQjdCLEtBQXJCO0FBQ0Q7O0FBaERNO0FBekRHLENBQUQsQ0FBYiIsImZpbGUiOiJzdGVwcGVyL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3B1aUNvbXBvbmVudCB9IGZyb20gJy4uL2NvbW1vbi9jb21wb25lbnQnO1xyXG5cclxuLy8gTm90ZSB0aGF0IHRoZSBiaXR3aXNlIG9wZXJhdG9ycyBhbmQgc2hpZnQgb3BlcmF0b3JzIG9wZXJhdGUgb24gMzItYml0IGludHNcclxuLy8gc28gaW4gdGhhdCBjYXNlLCB0aGUgbWF4IHNhZmUgaW50ZWdlciBpcyAyXjMxLTEsIG9yIDIxNDc0ODM2NDdcclxuY29uc3QgTUFYID0gMjE0NzQ4MzY0NztcclxuXHJcblNwdWlDb21wb25lbnQoe1xyXG4gIGZpZWxkOiB0cnVlLFxyXG5cclxuICBjbGFzc2VzOiBbXHJcbiAgICAnaW5wdXQtY2xhc3MnLFxyXG4gICAgJ3BsdXMtY2xhc3MnLFxyXG4gICAgJ21pbnVzLWNsYXNzJ1xyXG4gIF0sXHJcblxyXG4gIHByb3BzOiB7XHJcbiAgICB2YWx1ZTogTnVtYmVyLFxyXG4gICAgaW50ZWdlcjogQm9vbGVhbixcclxuICAgIGRpc2FibGVkOiBCb29sZWFuLFxyXG4gICAgYXN5bmNDaGFuZ2U6IEJvb2xlYW4sXHJcbiAgICBkaXNhYmxlSW5wdXQ6IEJvb2xlYW4sXHJcbiAgICBtaW46IHtcclxuICAgICAgdHlwZTogbnVsbCxcclxuICAgICAgdmFsdWU6IDFcclxuICAgIH0sXHJcbiAgICBtYXg6IHtcclxuICAgICAgdHlwZTogbnVsbCxcclxuICAgICAgdmFsdWU6IE1BWFxyXG4gICAgfSxcclxuICAgIHN0ZXA6IHtcclxuICAgICAgdHlwZTogbnVsbCxcclxuICAgICAgdmFsdWU6IDFcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBjb21wdXRlZDoge1xyXG4gICAgbWludXNEaXNhYmxlZCgpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZGF0YS5kaXNhYmxlZCB8fCB0aGlzLmRhdGEudmFsdWUgPD0gdGhpcy5kYXRhLm1pbjtcclxuICAgIH0sXHJcblxyXG4gICAgcGx1c0Rpc2FibGVkKCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5kYXRhLmRpc2FibGVkIHx8IHRoaXMuZGF0YS52YWx1ZSA+PSB0aGlzLmRhdGEubWF4O1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIHdhdGNoOiB7XHJcbiAgICB2YWx1ZSh2YWx1ZSkge1xyXG4gICAgICB0aGlzLnNldCh7XHJcbiAgICAgICAgdmFsdWU6IHRoaXMucmFuZ2UodmFsdWUpXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIGRhdGE6IHtcclxuICAgIGZvY3VzOiBmYWxzZVxyXG4gIH0sXHJcblxyXG4gIGNyZWF0ZWQoKSB7XHJcbiAgICB0aGlzLnNldCh7XHJcbiAgICAgIHZhbHVlOiB0aGlzLnJhbmdlKHRoaXMuZGF0YS52YWx1ZSlcclxuICAgIH0pO1xyXG4gIH0sXHJcblxyXG4gIG1ldGhvZHM6IHtcclxuICAgIG9uRm9jdXMoKSB7XHJcbiAgICAgIHRoaXMuc2V0RGF0YSh7XHJcbiAgICAgICAgZm9jdXM6IHRydWVcclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIGxpbWl0IHZhbHVlIHJhbmdlXHJcbiAgICByYW5nZSh2YWx1ZSkge1xyXG4gICAgICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4odGhpcy5kYXRhLm1heCwgdmFsdWUpLCB0aGlzLmRhdGEubWluKTtcclxuICAgIH0sXHJcblxyXG4gICAgb25JbnB1dChldmVudDogV2VhcHAuRXZlbnQpIHtcclxuICAgICAgY29uc3QgeyB2YWx1ZSA9ICcnIH0gPSBldmVudC5kZXRhaWwgfHwge307XHJcbiAgICAgIHRoaXMudHJpZ2dlcklucHV0KHZhbHVlKTtcclxuICAgIH0sXHJcblxyXG4gICAgb25DaGFuZ2UodHlwZSkge1xyXG4gICAgICBpZiAodGhpcy5kYXRhW2Ake3R5cGV9RGlzYWJsZWRgXSkge1xyXG4gICAgICAgIHRoaXMuJGVtaXQoJ292ZXJsaW1pdCcsIHR5cGUpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgZGlmZiA9IHR5cGUgPT09ICdtaW51cycgPyAtdGhpcy5kYXRhLnN0ZXAgOiArdGhpcy5kYXRhLnN0ZXA7XHJcbiAgICAgIGNvbnN0IHZhbHVlID0gTWF0aC5yb3VuZCgodGhpcy5kYXRhLnZhbHVlICsgZGlmZikgKiAxMDApIC8gMTAwO1xyXG4gICAgICB0aGlzLnRyaWdnZXJJbnB1dCh0aGlzLnJhbmdlKHZhbHVlKSk7XHJcbiAgICAgIHRoaXMuJGVtaXQodHlwZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIG9uQmx1cihldmVudDogV2VhcHAuRXZlbnQpIHtcclxuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnJhbmdlKHRoaXMuZGF0YS52YWx1ZSk7XHJcbiAgICAgIHRoaXMudHJpZ2dlcklucHV0KHZhbHVlKTtcclxuICAgICAgdGhpcy4kZW1pdCgnYmx1cicsIGV2ZW50KTtcclxuICAgIH0sXHJcblxyXG4gICAgb25NaW51cygpIHtcclxuICAgICAgdGhpcy5vbkNoYW5nZSgnbWludXMnKTtcclxuICAgIH0sXHJcblxyXG4gICAgb25QbHVzKCkge1xyXG4gICAgICB0aGlzLm9uQ2hhbmdlKCdwbHVzJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIHRyaWdnZXJJbnB1dCh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgIHRoaXMuc2V0KHtcclxuICAgICAgICB2YWx1ZTogdGhpcy5kYXRhLmFzeW5jQ2hhbmdlID8gdGhpcy5kYXRhLnZhbHVlIDogdmFsdWVcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIHZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcbn0pO1xyXG4iXX0=
