import { isObj } from '../common/utils';
const defaultOptions = {
  type: 'text',
  mask: false,
  message: '',
  show: true,
  zIndex: 1000,
  duration: 3000,
  position: 'middle',
  forbidClick: false,
  loadingType: 'circular',
  selector: '#spui-toast'
};
let queue = [];
let currentOptions = Object.assign({}, defaultOptions);

function parseOptions(message) {
  return isObj(message) ? message : {
    message
  };
}

function getContext() {
  const pages = getCurrentPages();
  return pages[pages.length - 1];
}

const Toast = (options = {}) => {
  options = Object.assign({}, currentOptions, parseOptions(options));
  const context = options.context || getContext();
  const toast = context.selectComponent(options.selector);

  if (!toast) {
    console.warn('未找到 spui-toast 节点，请确认 selector 及 context 是否正确');
    return;
  }

  delete options.context;
  delete options.selector;
  queue.push(toast);
  toast.set(options);
  clearTimeout(toast.timer);

  if (options.duration > 0) {
    toast.timer = setTimeout(() => {
      toast.clear();
      queue = queue.filter(item => item !== toast);
    }, options.duration);
  }

  return toast;
};

const createMethod = type => options => Toast(Object.assign({
  type
}, parseOptions(options)));

['loading', 'success', 'fail'].forEach(method => {
  Toast[method] = createMethod(method);
});

Toast.clear = () => {
  queue.forEach(toast => {
    toast.clear();
  });
  queue = [];
};

Toast.setDefaultOptions = options => {
  Object.assign(currentOptions, options);
};

Toast.resetDefaultOptions = () => {
  currentOptions = Object.assign({}, defaultOptions);
};

export default Toast;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRvYXN0L3RvYXN0LnRzIl0sIm5hbWVzIjpbImlzT2JqIiwiZGVmYXVsdE9wdGlvbnMiLCJ0eXBlIiwibWFzayIsIm1lc3NhZ2UiLCJzaG93IiwiekluZGV4IiwiZHVyYXRpb24iLCJwb3NpdGlvbiIsImZvcmJpZENsaWNrIiwibG9hZGluZ1R5cGUiLCJzZWxlY3RvciIsInF1ZXVlIiwiY3VycmVudE9wdGlvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJwYXJzZU9wdGlvbnMiLCJnZXRDb250ZXh0IiwicGFnZXMiLCJnZXRDdXJyZW50UGFnZXMiLCJsZW5ndGgiLCJUb2FzdCIsIm9wdGlvbnMiLCJjb250ZXh0IiwidG9hc3QiLCJzZWxlY3RDb21wb25lbnQiLCJjb25zb2xlIiwid2FybiIsInB1c2giLCJzZXQiLCJjbGVhclRpbWVvdXQiLCJ0aW1lciIsInNldFRpbWVvdXQiLCJjbGVhciIsImZpbHRlciIsIml0ZW0iLCJjcmVhdGVNZXRob2QiLCJmb3JFYWNoIiwibWV0aG9kIiwic2V0RGVmYXVsdE9wdGlvbnMiLCJyZXNldERlZmF1bHRPcHRpb25zIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxLQUFULFFBQXNCLGlCQUF0QjtBQTRCQSxNQUFNQyxjQUFjLEdBQUc7QUFDckJDLEVBQUFBLElBQUksRUFBRSxNQURlO0FBRXJCQyxFQUFBQSxJQUFJLEVBQUUsS0FGZTtBQUdyQkMsRUFBQUEsT0FBTyxFQUFFLEVBSFk7QUFJckJDLEVBQUFBLElBQUksRUFBRSxJQUplO0FBS3JCQyxFQUFBQSxNQUFNLEVBQUUsSUFMYTtBQU1yQkMsRUFBQUEsUUFBUSxFQUFFLElBTlc7QUFPckJDLEVBQUFBLFFBQVEsRUFBRSxRQVBXO0FBUXJCQyxFQUFBQSxXQUFXLEVBQUUsS0FSUTtBQVNyQkMsRUFBQUEsV0FBVyxFQUFFLFVBVFE7QUFVckJDLEVBQUFBLFFBQVEsRUFBRTtBQVZXLENBQXZCO0FBYUEsSUFBSUMsS0FBSyxHQUFHLEVBQVo7QUFDQSxJQUFJQyxjQUFjLEdBQUFD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OlsiaW1wb3J0IHsgaXNPYmogfSBmcm9tICcuLi9jb21tb24vdXRpbHMnO1xyXG5cclxudHlwZSBUb2FzdE1lc3NhZ2UgPSBzdHJpbmcgfCBudW1iZXI7XHJcblxyXG5leHBvcnQgdHlwZSBUb2FzdE9wdGlvbnMgPSB7XHJcbiAgc2hvdz86IGJvb2xlYW47XHJcbiAgdHlwZT86IHN0cmluZztcclxuICBtYXNrPzogYm9vbGVhbjtcclxuICB6SW5kZXg/OiBudW1iZXI7XHJcbiAgY29udGV4dD86IGFueTtcclxuICBwb3NpdGlvbj86IHN0cmluZztcclxuICBkdXJhdGlvbj86IG51bWJlcjtcclxuICBzZWxlY3Rvcj86IHN0cmluZztcclxuICBmb3JiaWRDbGljaz86IGJvb2xlYW47XHJcbiAgbG9hZGluZ1R5cGU/OiBzdHJpbmc7XHJcbiAgbWVzc2FnZT86IFRvYXN0TWVzc2FnZTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUb2FzdCB7XHJcbiAgKG1lc3NhZ2U6IFRvYXN0T3B0aW9ucyB8IFRvYXN0TWVzc2FnZSwgb3B0aW9ucz86IFRvYXN0T3B0aW9ucyk6IFdlYXBwLkNvbXBvbmVudDtcclxuICBsb2FkaW5nPyhvcHRpb25zPzogVG9hc3RPcHRpb25zIHwgVG9hc3RNZXNzYWdlKTogV2VhcHAuQ29tcG9uZW50O1xyXG4gIHN1Y2Nlc3M/KG9wdGlvbnM/OiBUb2FzdE9wdGlvbnMgfCBUb2FzdE1lc3NhZ2UpOiBXZWFwcC5Db21wb25lbnQ7XHJcbiAgZmFpbD8ob3B0aW9ucz86IFRvYXN0T3B0aW9ucyB8IFRvYXN0TWVzc2FnZSk6IFdlYXBwLkNvbXBvbmVudDtcclxuICBjbGVhcj8oKTogdm9pZDtcclxuICBzZXREZWZhdWx0T3B0aW9ucz8ob3B0aW9uczogVG9hc3RPcHRpb25zKTogdm9pZDtcclxuICByZXNldERlZmF1bHRPcHRpb25zPygpOiB2b2lkO1xyXG59XHJcblxyXG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcclxuICB0eXBlOiAndGV4dCcsXHJcbiAgbWFzazogZmFsc2UsXHJcbiAgbWVzc2FnZTogJycsXHJcbiAgc2hvdzogdHJ1ZSxcclxuICB6SW5kZXg6IDEwMDAsXHJcbiAgZHVyYXRpb246IDMwMDAsXHJcbiAgcG9zaXRpb246ICdtaWRkbGUnLFxyXG4gIGZvcmJpZENsaWNrOiBmYWxzZSxcclxuICBsb2FkaW5nVHlwZTogJ2NpcmN1bGFyJyxcclxuICBzZWxlY3RvcjogJyNzcHVpLXRvYXN0J1xyXG59O1xyXG5cclxubGV0IHF1ZXVlID0gW107XHJcbmxldCBjdXJyZW50T3B0aW9uczogVG9hc3RPcHRpb25zID0geyAuLi5kZWZhdWx0T3B0aW9ucyB9O1xyXG5cclxuZnVuY3Rpb24gcGFyc2VPcHRpb25zKG1lc3NhZ2UpOiBUb2FzdE9wdGlvbnMge1xyXG4gIHJldHVybiBpc09iaihtZXNzYWdlKSA/IG1lc3NhZ2UgOiB7IG1lc3NhZ2UgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0Q29udGV4dCgpIHtcclxuICBjb25zdCBwYWdlcyA9IGdldEN1cnJlbnRQYWdlcygpO1xyXG4gIHJldHVybiBwYWdlc1twYWdlcy5sZW5ndGggLSAxXTtcclxufVxyXG5cclxuY29uc3QgVG9hc3Q6IFRvYXN0ID0gKG9wdGlvbnMgPSB7fSkgPT4ge1xyXG4gIG9wdGlvbnMgPSB7XHJcbiAgICAuLi5jdXJyZW50T3B0aW9ucyxcclxuICAgIC4uLnBhcnNlT3B0aW9ucyhvcHRpb25zKVxyXG4gIH0gYXMgVG9hc3RPcHRpb25zO1xyXG5cclxuICBjb25zdCBjb250ZXh0ID0gb3B0aW9ucy5jb250ZXh0IHx8IGdldENvbnRleHQoKTtcclxuICBjb25zdCB0b2FzdCA9IGNvbnRleHQuc2VsZWN0Q29tcG9uZW50KG9wdGlvbnMuc2VsZWN0b3IpO1xyXG5cclxuICBpZiAoIXRvYXN0KSB7XHJcbiAgICBjb25zb2xlLndhcm4oJ+acquaJvuWIsCBzcHVpLXRvYXN0IOiKgueCue+8jOivt+ehruiupCBzZWxlY3RvciDlj4ogY29udGV4dCDmmK/lkKbmraPnoa4nKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGRlbGV0ZSBvcHRpb25zLmNvbnRleHQ7XHJcbiAgZGVsZXRlIG9wdGlvbnMuc2VsZWN0b3I7XHJcblxyXG4gIHF1ZXVlLnB1c2godG9hc3QpO1xyXG4gIHRvYXN0LnNldChvcHRpb25zKTtcclxuICBjbGVhclRpbWVvdXQodG9hc3QudGltZXIpO1xyXG5cclxuICBpZiAob3B0aW9ucy5kdXJhdGlvbiA+IDApIHtcclxuICAgIHRvYXN0LnRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIHRvYXN0LmNsZWFyKCk7XHJcbiAgICAgIHF1ZXVlID0gcXVldWUuZmlsdGVyKGl0ZW0gPT4gaXRlbSAhPT0gdG9hc3QpO1xyXG4gICAgfSwgb3B0aW9ucy5kdXJhdGlvbik7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdG9hc3Q7XHJcbn07XHJcblxyXG5jb25zdCBjcmVhdGVNZXRob2QgPSB0eXBlID0+IG9wdGlvbnMgPT4gVG9hc3Qoe1xyXG4gIHR5cGUsIC4uLnBhcnNlT3B0aW9ucyhvcHRpb25zKVxyXG59KTtcclxuXHJcblsnbG9hZGluZycsICdzdWNjZXNzJywgJ2ZhaWwnXS5mb3JFYWNoKG1ldGhvZCA9PiB7XHJcbiAgVG9hc3RbbWV0aG9kXSA9IGNyZWF0ZU1ldGhvZChtZXRob2QpO1xyXG59KTtcclxuXHJcblRvYXN0LmNsZWFyID0gKCkgPT4ge1xyXG4gIHF1ZXVlLmZvckVhY2godG9hc3QgPT4ge1xyXG4gICAgdG9hc3QuY2xlYXIoKTtcclxuICB9KTtcclxuICBxdWV1ZSA9IFtdO1xyXG59O1xyXG5cclxuVG9hc3Quc2V0RGVmYXVsdE9wdGlvbnMgPSBvcHRpb25zID0+IHtcclxuICBPYmplY3QuYXNzaWduKGN1cnJlbnRPcHRpb25zLCBvcHRpb25zKTtcclxufTtcclxuXHJcblRvYXN0LnJlc2V0RGVmYXVsdE9wdGlvbnMgPSAoKSA9PiB7XHJcbiAgY3VycmVudE9wdGlvbnMgPSB7IC4uLmRlZmF1bHRPcHRpb25zIH07XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUb2FzdDtcclxuIl19
