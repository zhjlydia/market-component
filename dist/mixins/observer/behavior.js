export const behavior = Behavior({
  created() {
    if (!this.$options) {
      return;
    }

    const cache = {};
    const {
      computed
    } = this.$options();
    const keys = Object.keys(computed);

    this.calcComputed = () => {
      const needUpdate = {};
      keys.forEach(key => {
        const value = computed[key].call(this);

        if (cache[key] !== value) {
          cache[key] = needUpdate[key] = value;
        }
      });
      return needUpdate;
    };
  },

  attached() {
    this.set();
  },

  methods: {
    // set data and set computed data
    set(data, callback) {
      if (data) {
        this.setData(data, callback);
      }

      if (this.calcComputed) {
        this.setData(this.calcComputed());
      }
    }

  }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1peGlucy9vYnNlcnZlci9iZWhhdmlvci50cyJdLCJuYW1lcyI6WyJiZWhhdmlvciIsIkJlaGF2aW9yIiwiY3JlYXRlZCIsIiRvcHRpb25zIiwiY2FjaGUiLCJjb21wdXRlZCIsImtleXMiLCJPYmplY3QiLCJjYWxjQ29tcHV0ZWQiLCJuZWVkVXBkYXRlIiwiZm9yRWFjaCIsImtleSIsInZhbHVlIiwiY2FsbCIsImF0dGFjaGVkIiwic2V0IiwibWV0aG9kcyIsImRhdGEiLCJjYWxsYmFjayIsInNldERhdGEiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sTUFBTUEsUUFBUSxHQUFHQyxRQUFRLENBQUM7QUFDL0JDLEVBQUFBLE9BQU8sR0FBQTtBQUNMLFFBQUksQ0FBQyxLQUFLQyxRQUFWLEVBQW9CO0FBQ2xCO0FBQ0Q7O0FBRUQsVUFBTUMsS0FBSyxHQUFHLEVBQWQ7QUFDQSxVQUFNO0FBQUVDLE1BQUFBO0FBQUYsUUFBZSxLQUFLRixRQUFMLEVBQXJCO0FBQ0EsVUFBTUcsSUFBSSxHQUFHQyxNQUFNLENBQUNELElBQVAsQ0FBWUQsUUFBWixDQUFiOztBQUVBLFNBQUtHLFlBQUwsR0FBb0IsTUFBSztBQUN2QixZQUFNQyxVQUFVLEdBQUcsRUFBbkI7QUFDQUgsTUFBQUEsSUFBSSxDQUFDSSxPQUFMLENBQWFDLEdBQUcsSUFBRztBQUNqQixjQUFNQyxLQUFLLEdBQUdQLFFBQVEsQ0FBQ00sR0FBRCxDQUFSLENBQWNFLElBQWQsQ0FBbUIsSUFBbkIsQ0FBZDs7QUFFQSxZQUFJVCxLQUFLLENBQUNPLEdBQUQsQ0FBTCxLQUFlQyxLQUFuQixFQUEwQjtBQUN4QlIsVUFBQUEsS0FBSyxDQUFDTyxHQUFELENBQUwsR0FBYUYsVUFBVSxDQUFDRSxHQUFELENBQVYsR0FBa0JDLEtBQS9CO0FBQ0Q7QUFDRixPQU5EO0FBUUEsYUFBT0gsVUFBUDtBQUNELEtBWEQ7QUFZRCxHQXRCOEI7O0FBd0IvQkssRUFBQUEsUUFBUSxHQUFBO0FBQ04sU0FBS0MsR0FBTDtBQUNELEdBMUI4Qjs7QUE0Qi9CQyxFQUFBQSxPQUFPLEVBQUU7QUFDUDtBQUNBRCxJQUFBQSxHQUFHLENBQUNFLElBQUQsRUFBT0MsUUFBUCxFQUFlO0FBQ2hCLFVBQUlELElBQUosRUFBVTtBQUNSLGFBQUtFLE9BQUwsQ0FBYUYsSUFBYixFQUFtQkMsUUFBbkI7QUFDRDs7QUFFRCxVQUFJLEtBQUtWLFlBQVQsRUFBdUI7QUFDckIsYUFBS1csT0FBTCxDQUFhLEtBQUtYLFlBQUwsRUFBYjtBQUNEO0FBQ0Y7O0FBVk07QUE1QnNCLENBQUQsQ0FBekIiLCJmaWxlIjoibWl4aW5zL29ic2VydmVyL2JlaGF2aW9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGJlaGF2aW9yID0gQmVoYXZpb3Ioe1xyXG4gIGNyZWF0ZWQoKSB7XHJcbiAgICBpZiAoIXRoaXMuJG9wdGlvbnMpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNhY2hlID0ge307XHJcbiAgICBjb25zdCB7IGNvbXB1dGVkIH0gPSB0aGlzLiRvcHRpb25zKCk7XHJcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoY29tcHV0ZWQpO1xyXG5cclxuICAgIHRoaXMuY2FsY0NvbXB1dGVkID0gKCkgPT4ge1xyXG4gICAgICBjb25zdCBuZWVkVXBkYXRlID0ge307XHJcbiAgICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gY29tcHV0ZWRba2V5XS5jYWxsKHRoaXMpO1xyXG5cclxuICAgICAgICBpZiAoY2FjaGVba2V5XSAhPT0gdmFsdWUpIHtcclxuICAgICAgICAgIGNhY2hlW2tleV0gPSBuZWVkVXBkYXRlW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgcmV0dXJuIG5lZWRVcGRhdGU7XHJcbiAgICB9O1xyXG4gIH0sXHJcblxyXG4gIGF0dGFjaGVkKCkge1xyXG4gICAgdGhpcy5zZXQoKTtcclxuICB9LFxyXG5cclxuICBtZXRob2RzOiB7XHJcbiAgICAvLyBzZXQgZGF0YSBhbmQgc2V0IGNvbXB1dGVkIGRhdGFcclxuICAgIHNldChkYXRhLCBjYWxsYmFjaykge1xyXG4gICAgICBpZiAoZGF0YSkge1xyXG4gICAgICAgIHRoaXMuc2V0RGF0YShkYXRhLCBjYWxsYmFjayk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0aGlzLmNhbGNDb21wdXRlZCkge1xyXG4gICAgICAgIHRoaXMuc2V0RGF0YSh0aGlzLmNhbGNDb21wdXRlZCgpKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufSk7XHJcbiJdfQ==
