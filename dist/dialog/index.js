import { SpuiComponent } from '../common/component';
import { openType } from '../mixins/open-type';
SpuiComponent({
  mixins: [openType],
  props: {
    show: Boolean,
    title: String,
    message: String,
    useSlot: Boolean,
    asyncClose: Boolean,
    messageAlign: String,
    showCancelButton: Boolean,
    closeOnClickOverlay: Boolean,
    confirmButtonOpenType: String,
    zIndex: {
      type: Number,
      value: 100
    },
    confirmButtonText: {
      type: String,
      value: '确认'
    },
    cancelButtonText: {
      type: String,
      value: '取消'
    },
    showConfirmButton: {
      type: Boolean,
      value: true
    },
    overlay: {
      type: Boolean,
      value: true
    },
    transition: {
      type: String,
      value: 'scale'
    }
  },
  data: {
    loading: {
      confirm: false,
      cancel: false
    }
  },
  watch: {
    show(show) {
      !show && this.stopLoading();
    }

  },
  methods: {
    onConfirm() {
      this.handleAction('confirm');
    },

    onCancel() {
      this.handleAction('cancel');
    },

    onClickOverlay() {
      this.onClose('overlay');
    },

    handleAction(action) {
      if (this.data.asyncClose) {
        this.set({
          [`loading.${action}`]: true
        });
      }

      this.onClose(action);
    },

    close() {
      this.set({
        show: false
      });
    },

    stopLoading() {
      this.set({
        loading: {
          confirm: false,
          cancel: false
        }
      });
    },

    onClose(action) {
      if (!this.data.asyncClose) {
        this.close();
      }

      this.$emit('close', action); //把 dialog 实例传递出去，可以通过 stopLoading() 在外部关闭按钮的 loading

      this.$emit(action, {
        dialog: this
      });
      const callback = this.data[action === 'confirm' ? 'onConfirm' : 'onCancel'];

      if (callback) {
        callback(this);
      }
    }

  }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpYWxvZy9pbmRleC50cyJdLCJuYW1lcyI6WyJTcHVpQ29tcG9uZW50Iiwib3BlblR5cGUiLCJtaXhpbnMiLCJwcm9wcyIsInNob3ciLCJCb29sZWFuIiwidGl0bGUiLCJTdHJpbmciLCJtZXNzYWdlIiwidXNlU2xvdCIsImFzeW5jQ2xvc2UiLCJtZXNzYWdlQWxpZ24iLCJzaG93Q2FuY2VsQnV0dG9uIiwiY2xvc2VPbkNsaWNrT3ZlcmxheSIsImNvbmZpcm1CdXR0b25PcGVuVHlwZSIsInpJbmRleCIsInR5cGUiLCJOdW1iZXIiLCJ2YWx1ZSIsImNvbmZpcm1CdXR0b25UZXh0IiwiY2FuY2VsQnV0dG9uVGV4dCIsInNob3dDb25maXJtQnV0dG9uIiwib3ZlcmxheSIsInRyYW5zaXRpb24iLCJkYXRhIiwibG9hZGluZyIsImNvbmZpcm0iLCJjYW5jZWwiLCJ3YXRjaCIsInN0b3BMb2FkaW5nIiwibWV0aG9kcyIsIm9uQ29uZmlybSIsImhhbmRsZUFjdGlvbiIsIm9uQ2FuY2VsIiwib25DbGlja092ZXJsYXkiLCJvbkNsb3NlIiwiYWN0aW9uIiwic2V0IiwiY2xvc2UiLCIkZW1pdCIsImRpYWxvZyIsImNhbGxiYWNrIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxhQUFULFFBQThCLHFCQUE5QjtBQUNBLFNBQVNDLFFBQVQsUUFBeUIscUJBQXpCO0FBRUFELGFBQWEsQ0FBQztBQUNaRSxFQUFBQSxNQUFNLEVBQUUsQ0FBQ0QsUUFBRCxDQURJO0FBR1pFLEVBQUFBLEtBQUssRUFBRTtBQUNMQyxJQUFBQSxJQUFJLEVBQUVDLE9BREQ7QUFFTEMsSUFBQUEsS0FBSyxFQUFFQyxNQUZGO0FBR0xDLElBQUFBLE9BQU8sRUFBRUQsTUFISjtBQUlMRSxJQUFBQSxPQUFPLEVBQUVKLE9BSko7QUFLTEssSUFBQUEsVUFBVSxFQUFFTCxPQUxQO0FBTUxNLElBQUFBLFlBQVksRUFBRUosTUFOVDtBQU9MSyxJQUFBQSxnQkFBZ0IsRUFBRVAsT0FQYjtBQVFMUSxJQUFBQSxtQkFBbUIsRUFBRVIsT0FSaEI7QUFTTFMsSUFBQUEscUJBQXFCLEVBQUVQLE1BVGxCO0FBVUxRLElBQUFBLE1BQU0sRUFBRTtBQUNOQyxNQUFBQSxJQUFJLEVBQUVDLE1BREE7QUFFTkMsTUFBQUEsS0FBSyxFQUFFO0FBRkQsS0FWSDtBQWNMQyxJQUFBQSxpQkFBaUIsRUFBRTtBQUNqQkgsTUFBQUEsSUFBSSxFQUFFVCxNQURXO0FBRWpCVyxNQUFBQSxLQUFLLEVBQUU7QUFGVSxLQWRkO0FBa0JMRSxJQUFBQSxnQkFBZ0IsRUFBRTtBQUNoQkosTUFBQUEsSUFBSSxFQUFFVCxNQURVO0FBRWhCVyxNQUFBQSxLQUFLLEVBQUU7QUFGUyxLQWxCYjtBQXNCTEcsSUFBQUEsaUJBQWlCLEVBQUU7QUFDakJMLE1BQUFBLElBQUksRUFBRVgsT0FEVztBQUVqQmEsTUFBQUEsS0FBSyxFQUFFO0FBRlUsS0F0QmQ7QUEwQkxJLElBQUFBLE9BQU8sRUFBRTtBQUNQTixNQUFBQSxJQUFJLEVBQUVYLE9BREM7QUFFUGEsTUFBQUEsS0FBSyxFQUFFO0FBRkEsS0ExQko7QUE4QkxLLElBQUFBLFVBQVUsRUFBRTtBQUNWUCxNQUFBQSxJQUFJLEVBQUVULE1BREk7QUFFVlcsTUFBQUEsS0FBSyxFQUFFO0FBRkc7QUE5QlAsR0FISztBQXVDWk0sRUFBQUEsSUFBSSxFQUFFO0FBQ0pDLElBQUFBLE9BQU8sRUFBRTtBQUNQQyxNQUFBQSxPQUFPLEVBQUUsS0FERjtBQUVQQyxNQUFBQSxNQUFNLEVBQUU7QUFGRDtBQURMLEdBdkNNO0FBOENaQyxFQUFBQSxLQUFLLEVBQUU7QUFDTHhCLElBQUFBLElBQUksQ0FBQ0EsSUFBRCxFQUFLO0FBQ1AsT0FBQ0EsSUFBRCxJQUFTLEtBQUt5QixXQUFMLEVBQVQ7QUFDRDs7QUFISSxHQTlDSztBQW9EWkMsRUFBQUEsT0FBTyxFQUFFO0FBQ1BDLElBQUFBLFNBQVMsR0FBQTtBQUNQLFdBQUtDLFlBQUwsQ0FBa0IsU0FBbEI7QUFDRCxLQUhNOztBQUtQQyxJQUFBQSxRQUFRLEdBQUE7QUFDTixXQUFLRCxZQUFMLENBQWtCLFFBQWxCO0FBQ0QsS0FQTTs7QUFTUEUsSUFBQUEsY0FBYyxHQUFBO0FBQ1osV0FBS0MsT0FBTCxDQUFhLFNBQWI7QUFDRCxLQVhNOztBQWFQSCxJQUFBQSxZQUFZLENBQUNJLE1BQUQsRUFBTztBQUNqQixVQUFJLEtBQUtaLElBQUwsQ0FBVWQsVUFBZCxFQUEwQjtBQUN4QixhQUFLMkIsR0FBTCxDQUFTO0FBQ1AsV0FBQyxXQUFXRCxNQUFNLEVBQWxCLEdBQXVCO0FBRGhCLFNBQVQ7QUFHRDs7QUFFRCxXQUFLRCxPQUFMLENBQWFDLE1BQWI7QUFDRCxLQXJCTTs7QUF1QlBFLElBQUFBLEtBQUssR0FBQTtBQUNILFdBQUtELEdBQUwsQ0FBUztBQUNQakMsUUFBQUEsSUFBSSxFQUFFO0FBREMsT0FBVDtBQUdELEtBM0JNOztBQTZCUHlCLElBQUFBLFdBQVcsR0FBQTtBQUNULFdBQUtRLEdBQUwsQ0FBUztBQUNQWixRQUFBQSxPQUFPLEVBQUU7QUFDUEMsVUFBQUEsT0FBTyxFQUFFLEtBREY7QUFFUEMsVUFBQUEsTUFBTSxFQUFFO0FBRkQ7QUFERixPQUFUO0FBTUQsS0FwQ007O0FBc0NQUSxJQUFBQSxPQUFPLENBQUNDLE1BQUQsRUFBTztBQUNaLFVBQUksQ0FBQyxLQUFLWixJQUFMLENBQVVkLFVBQWYsRUFBMkI7QUFDekIsYUFBSzRCLEtBQUw7QUFDRDs7QUFDRCxXQUFLQyxLQUFMLENBQVcsT0FBWCxFQUFvQkgsTUFBcEIsRUFKWSxDQU1aOztBQUNBLFdBQUtHLEtBQUwsQ0FBV0gsTUFBWCxFQUFtQjtBQUFFSSxRQUFBQSxNQUFNLEVBQUU7QUFBVixPQUFuQjtBQUVBLFlBQU1DLFFBQVEsR0FBRyxLQUFLakIsSUFBTCxDQUFVWSxNQUFNLEtBQUssU0FBWCxHQUF1QixXQUF2QixHQUFxQyxVQUEvQyxDQUFqQjs7QUFDQSxVQUFJSyxRQUFKLEVBQWM7QUFDWkEsUUFBQUEsUUFBUSxDQUFDLElBQUQsQ0FBUjtBQUNEO0FBQ0Y7O0FBbkRNO0FBcERHLENBQUQsQ0FBYiIsImZpbGUiOiJkaWFsb2cvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTcHVpQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tbW9uL2NvbXBvbmVudCc7XHJcbmltcG9ydCB7IG9wZW5UeXBlIH0gZnJvbSAnLi4vbWl4aW5zL29wZW4tdHlwZSc7XHJcblxyXG5TcHVpQ29tcG9uZW50KHtcclxuICBtaXhpbnM6IFtvcGVuVHlwZV0sXHJcblxyXG4gIHByb3BzOiB7XHJcbiAgICBzaG93OiBCb29sZWFuLFxyXG4gICAgdGl0bGU6IFN0cmluZyxcclxuICAgIG1lc3NhZ2U6IFN0cmluZyxcclxuICAgIHVzZVNsb3Q6IEJvb2xlYW4sXHJcbiAgICBhc3luY0Nsb3NlOiBCb29sZWFuLFxyXG4gICAgbWVzc2FnZUFsaWduOiBTdHJpbmcsXHJcbiAgICBzaG93Q2FuY2VsQnV0dG9uOiBCb29sZWFuLFxyXG4gICAgY2xvc2VPbkNsaWNrT3ZlcmxheTogQm9vbGVhbixcclxuICAgIGNvbmZpcm1CdXR0b25PcGVuVHlwZTogU3RyaW5nLFxyXG4gICAgekluZGV4OiB7XHJcbiAgICAgIHR5cGU6IE51bWJlcixcclxuICAgICAgdmFsdWU6IDEwMFxyXG4gICAgfSxcclxuICAgIGNvbmZpcm1CdXR0b25UZXh0OiB7XHJcbiAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgdmFsdWU6ICfnoa7orqQnXHJcbiAgICB9LFxyXG4gICAgY2FuY2VsQnV0dG9uVGV4dDoge1xyXG4gICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgIHZhbHVlOiAn5Y+W5raIJ1xyXG4gICAgfSxcclxuICAgIHNob3dDb25maXJtQnV0dG9uOiB7XHJcbiAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICAgIHZhbHVlOiB0cnVlXHJcbiAgICB9LFxyXG4gICAgb3ZlcmxheToge1xyXG4gICAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgICB2YWx1ZTogdHJ1ZVxyXG4gICAgfSxcclxuICAgIHRyYW5zaXRpb246IHtcclxuICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICB2YWx1ZTogJ3NjYWxlJ1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIGRhdGE6IHtcclxuICAgIGxvYWRpbmc6IHtcclxuICAgICAgY29uZmlybTogZmFsc2UsXHJcbiAgICAgIGNhbmNlbDogZmFsc2VcclxuICAgIH1cclxuICB9LFxyXG5cclxuICB3YXRjaDoge1xyXG4gICAgc2hvdyhzaG93KSB7XHJcbiAgICAgICFzaG93ICYmIHRoaXMuc3RvcExvYWRpbmcoKTtcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBtZXRob2RzOiB7XHJcbiAgICBvbkNvbmZpcm0oKSB7XHJcbiAgICAgIHRoaXMuaGFuZGxlQWN0aW9uKCdjb25maXJtJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIG9uQ2FuY2VsKCkge1xyXG4gICAgICB0aGlzLmhhbmRsZUFjdGlvbignY2FuY2VsJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIG9uQ2xpY2tPdmVybGF5KCkge1xyXG4gICAgICB0aGlzLm9uQ2xvc2UoJ292ZXJsYXknKTtcclxuICAgIH0sXHJcblxyXG4gICAgaGFuZGxlQWN0aW9uKGFjdGlvbikge1xyXG4gICAgICBpZiAodGhpcy5kYXRhLmFzeW5jQ2xvc2UpIHtcclxuICAgICAgICB0aGlzLnNldCh7XHJcbiAgICAgICAgICBbYGxvYWRpbmcuJHthY3Rpb259YF06IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5vbkNsb3NlKGFjdGlvbik7XHJcbiAgICB9LFxyXG5cclxuICAgIGNsb3NlKCkge1xyXG4gICAgICB0aGlzLnNldCh7XHJcbiAgICAgICAgc2hvdzogZmFsc2VcclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIHN0b3BMb2FkaW5nKCkge1xyXG4gICAgICB0aGlzLnNldCh7XHJcbiAgICAgICAgbG9hZGluZzoge1xyXG4gICAgICAgICAgY29uZmlybTogZmFsc2UsXHJcbiAgICAgICAgICBjYW5jZWw6IGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgb25DbG9zZShhY3Rpb24pIHtcclxuICAgICAgaWYgKCF0aGlzLmRhdGEuYXN5bmNDbG9zZSkge1xyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLiRlbWl0KCdjbG9zZScsIGFjdGlvbik7XHJcbiAgICAgIFxyXG4gICAgICAvL+aKiiBkaWFsb2cg5a6e5L6L5Lyg6YCS5Ye65Y6777yM5Y+v5Lul6YCa6L+HIHN0b3BMb2FkaW5nKCkg5Zyo5aSW6YOo5YWz6Zet5oyJ6ZKu55qEIGxvYWRpbmdcclxuICAgICAgdGhpcy4kZW1pdChhY3Rpb24sIHsgZGlhbG9nOiB0aGlzIH0pO1xyXG5cclxuICAgICAgY29uc3QgY2FsbGJhY2sgPSB0aGlzLmRhdGFbYWN0aW9uID09PSAnY29uZmlybScgPyAnb25Db25maXJtJyA6ICdvbkNhbmNlbCddO1xyXG4gICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICBjYWxsYmFjayh0aGlzKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufSk7XHJcbiJdfQ==
